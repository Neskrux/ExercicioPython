def S(n):   ##A EXERCICIO 1
    if n == 1:
        return 10
    else:
        return S(n - 1) + 10

def A(n):   ##B
    if n == 1:
        return 2
    else:
        return A(n - 1) - 1

def B(n):   ##C
    if n == 1:
        return 1
    else:
        return B(n - 1) + n ** 2

def P(n):   ##D
    if n == 1:
        return 1
    else:
        return n ** 2 * P(n - 1) + n - 1

def D(n):   ##E
    if n == 1:
        return 3
    elif n == 2:
        return 5
    else:
        return (n - 1) * D(n - 1) + (n - 2) * D(n - 2)

def W(n):   ##F
    if n == 1:
        return 2
    elif n == 2:
        return 5
    else:
        return W(n - 1) * W(n - 2)

def T(n):   ##G
    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    else:
        return T(n - 1) + 2 * T(n - 2) + 3 * T(n - 3)


def progressao_geometrica(a, r, n): ##EXERCICIO 2
    if n == 1:
        return a
    else:
        return progressao_geometrica(a, r, n - 1) * r


termo_inicial = 2
razao = 3
n = 5

for i in range(1, n + 1):
    termo = progressao_geometrica(termo_inicial, razao, i)
    print(f'Termo {i}: {termo}')


def pertence_a_T(numero): ##EXERCICIO 3
    if numero == 2:
        return True
    if numero < 2:
        return False
    if numero % 2 == 0:
        return pertence_a_T(numero // 2)
    if (numero - 3) % 2 == 0:
        return pertence_a_T((numero - 3) // 2)
    return False

numeros = [6, 7, 19, 12]

for numero in numeros:
    if pertence_a_T(numero):
        print(f'{numero} pertence a T')
    else:
        print(f'{numero} não pertence a T')



def pertence_a_M(numero): ## EXERCICIO 4
    if numero == 2 or numero == 3:
        return True
    if numero < 2:
        return False
    for i in range(2, numero):
        if numero % i == 0 and pertence_a_M(i) and pertence_a_M(numero // i):
            return True
    return False

numeros = [6, 9, 16, 21, 26, 54, 72, 218]

for numero in numeros:
    if pertence_a_M(numero):
        print(f'{numero} pertence a M')
    else:
        print(f'{numero} não pertence a M')


def belongs_to_S(string): ##EXERCICIO 5
    # Base cases
    if string == 'a':
        return True
    if string == 'b':
        return True
    if not string:
        return False

    # Se a string termina com 'b', verifique o restante sem o último 'b'
    if string[-1] == 'b':
        return belongs_to_S(string[:-1])

    return False


strings_to_check = ["a", "ab", "aba", "aaab", "bbbbb"]
for s in strings_to_check:
    if belongs_to_S(s):
        print(f"'{s}' pertence a S.")
    else:
        print(f"'{s}' não pertence a S.")


def pertence_a_W(cadeia): #EXERCICIO 6
    if cadeia == "a" or cadeia == "b" or cadeia == "c":
        return True
    if cadeia.startswith("a") and cadeia.endswith("c"):

        parte_central = cadeia[1:-1]
        if pertence_a_W(parte_central):
            return True
    return False

cadeias = ["a(b)c", "a(a(b)c)c", "a(abc)c", "a(a(a(a)c)c)c", "a(aacc)c"]

for cadeia in cadeias:
    if pertence_a_W(cadeia):
        print(f'"{cadeia}" pertence a W')
    else:
        print(f'"{cadeia}" não pertence a W')


def gerar_cadeias_binarias_impares_zeros(n, atual=""): ##EXERCICIO 7
    if n == 0:
        if atual.count("0") % 2 == 1:
            print(atual)
        return
    gerar_cadeias_binarias_impares_zeros(n - 1, atual + "0")
    gerar_cadeias_binarias_impares_zeros(n - 1, atual + "1")

gerar_cadeias_binarias_impares_zeros(3)


def sequencia_a(n): #EXERCICIO 8 A
    if n == 1:
        return 1
    else:
        return sequencia_a(n - 1) * 3

def sequencia_b(n): ##EXERCICIO 8 B
    if n == 1:
        return 2
    else:
        return sequencia_b(n - 1) // 2

def sequencia_c(n, a, b): #EXERCICIO 8 C
    if n == 1:
        return a
    if n == 2:
        return b
    return sequencia_c(n - 1, a, b) + sequencia_c(n - 2, a, b)

def sequencia_d (n, p, q): #EXERCICIO 8 D
    if n % 2 == 1:
        return p - (n // 2) * q
    else:
        return p + ((n // 2) - 1) * q


# exercício 9
def T(n):
    if n == 1:
        return 1
    else:
        return n + T(n - 1)


def numero_de_bacterias(n): #EXERCICIO 10
    if n == 1:
        return 50000  # População inicial
    else:
        return 3 * numero_de_bacterias(n - 1)

populacao_atual = 50000 #EXERCICO 10 B
n = 1

while populacao_atual <= 200000:
    n += 1
    populacao_atual = 3 * populacao_atual

print(f'Em {n} leituras, a população de bactérias excederá 200.000.')





# ex 11
def Rotina(L, j):
    if j == 1:
        return L

    i = L.index(max(L[:j]))

    L[i], L[j - 1] = L[j - 1], L[i]

    return Rotina(L, j - 1)


L = [3, 7, 4, 2, 6]

Rotina(L, 5)
print(L)

# l = [3,7,4,2,6]
# ListaRotina(l, 5)

# print(l)










